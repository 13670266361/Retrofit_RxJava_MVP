package com.example.y.mvp;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "IMAGE_LIST_INFO".
*/
public class ImageListInfoDao extends AbstractDao<ImageListInfo, Integer> {

    public static final String TABLENAME = "IMAGE_LIST_INFO";

    /**
     * Properties of entity ImageListInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Tag = new Property(0, Integer.class, "tag", true, "TAG");
        public final static Property Id = new Property(1, Integer.class, "id", false, "ID");
        public final static Property Galleryclass = new Property(2, Integer.class, "galleryclass", false, "GALLERYCLASS");
        public final static Property Title = new Property(3, String.class, "title", false, "TITLE");
        public final static Property Img = new Property(4, String.class, "img", false, "IMG");
        public final static Property Count = new Property(5, Integer.class, "count", false, "COUNT");
        public final static Property Rcount = new Property(6, Integer.class, "rcount", false, "RCOUNT");
        public final static Property Fcount = new Property(7, Integer.class, "fcount", false, "FCOUNT");
        public final static Property Size = new Property(8, Integer.class, "size", false, "SIZE");
    };


    public ImageListInfoDao(DaoConfig config) {
        super(config);
    }
    
    public ImageListInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"IMAGE_LIST_INFO\" (" + //
                "\"TAG\" INTEGER PRIMARY KEY ," + // 0: tag
                "\"ID\" INTEGER," + // 1: id
                "\"GALLERYCLASS\" INTEGER," + // 2: galleryclass
                "\"TITLE\" TEXT," + // 3: title
                "\"IMG\" TEXT," + // 4: img
                "\"COUNT\" INTEGER," + // 5: count
                "\"RCOUNT\" INTEGER," + // 6: rcount
                "\"FCOUNT\" INTEGER," + // 7: fcount
                "\"SIZE\" INTEGER);"); // 8: size
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"IMAGE_LIST_INFO\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, ImageListInfo entity) {
        stmt.clearBindings();
 
        Integer tag = entity.getTag();
        if (tag != null) {
            stmt.bindLong(1, tag);
        }
 
        Integer id = entity.getId();
        if (id != null) {
            stmt.bindLong(2, id);
        }
 
        Integer galleryclass = entity.getGalleryclass();
        if (galleryclass != null) {
            stmt.bindLong(3, galleryclass);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(4, title);
        }
 
        String img = entity.getImg();
        if (img != null) {
            stmt.bindString(5, img);
        }
 
        Integer count = entity.getCount();
        if (count != null) {
            stmt.bindLong(6, count);
        }
 
        Integer rcount = entity.getRcount();
        if (rcount != null) {
            stmt.bindLong(7, rcount);
        }
 
        Integer fcount = entity.getFcount();
        if (fcount != null) {
            stmt.bindLong(8, fcount);
        }
 
        Integer size = entity.getSize();
        if (size != null) {
            stmt.bindLong(9, size);
        }
    }

    /** @inheritdoc */
    @Override
    public Integer readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public ImageListInfo readEntity(Cursor cursor, int offset) {
        ImageListInfo entity = new ImageListInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0), // tag
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // id
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // galleryclass
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // title
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // img
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // count
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // rcount
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // fcount
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8) // size
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, ImageListInfo entity, int offset) {
        entity.setTag(cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0));
        entity.setId(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setGalleryclass(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setTitle(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setImg(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setCount(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setRcount(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setFcount(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setSize(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
     }
    
    /** @inheritdoc */
    @Override
    protected Integer updateKeyAfterInsert(ImageListInfo entity, long rowId) {
        return entity.getTag();
    }
    
    /** @inheritdoc */
    @Override
    public Integer getKey(ImageListInfo entity) {
        if(entity != null) {
            return entity.getTag();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
