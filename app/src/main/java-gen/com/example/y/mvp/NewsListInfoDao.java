package com.example.y.mvp;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.example.y.mvp.NewsListInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "NEWS_LIST_INFO".
*/
public class NewsListInfoDao extends AbstractDao<NewsListInfo, Void> {

    public static final String TABLENAME = "NEWS_LIST_INFO";

    /**
     * Properties of entity NewsListInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Integer.class, "id", false, "ID");
        public final static Property Type = new Property(1, Integer.class, "type", false, "TYPE");
        public final static Property Count = new Property(2, Integer.class, "count", false, "COUNT");
        public final static Property Description = new Property(3, String.class, "description", false, "DESCRIPTION");
        public final static Property Fcount = new Property(4, Integer.class, "fcount", false, "FCOUNT");
        public final static Property Fromname = new Property(5, String.class, "fromname", false, "FROMNAME");
        public final static Property Title = new Property(6, String.class, "title", false, "TITLE");
        public final static Property Img = new Property(7, String.class, "img", false, "IMG");
        public final static Property Fromurl = new Property(8, String.class, "fromurl", false, "FROMURL");
        public final static Property Time = new Property(9, Long.class, "time", false, "TIME");
        public final static Property Keywords = new Property(10, String.class, "keywords", false, "KEYWORDS");
    };


    public NewsListInfoDao(DaoConfig config) {
        super(config);
    }
    
    public NewsListInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"NEWS_LIST_INFO\" (" + //
                "\"ID\" INTEGER," + // 0: id
                "\"TYPE\" INTEGER," + // 1: type
                "\"COUNT\" INTEGER," + // 2: count
                "\"DESCRIPTION\" TEXT," + // 3: description
                "\"FCOUNT\" INTEGER," + // 4: fcount
                "\"FROMNAME\" TEXT," + // 5: fromname
                "\"TITLE\" TEXT," + // 6: title
                "\"IMG\" TEXT," + // 7: img
                "\"FROMURL\" TEXT," + // 8: fromurl
                "\"TIME\" INTEGER," + // 9: time
                "\"KEYWORDS\" TEXT);"); // 10: keywords
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"NEWS_LIST_INFO\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, NewsListInfo entity) {
        stmt.clearBindings();
 
        Integer id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer type = entity.getType();
        if (type != null) {
            stmt.bindLong(2, type);
        }
 
        Integer count = entity.getCount();
        if (count != null) {
            stmt.bindLong(3, count);
        }
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(4, description);
        }
 
        Integer fcount = entity.getFcount();
        if (fcount != null) {
            stmt.bindLong(5, fcount);
        }
 
        String fromname = entity.getFromname();
        if (fromname != null) {
            stmt.bindString(6, fromname);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(7, title);
        }
 
        String img = entity.getImg();
        if (img != null) {
            stmt.bindString(8, img);
        }
 
        String fromurl = entity.getFromurl();
        if (fromurl != null) {
            stmt.bindString(9, fromurl);
        }
 
        Long time = entity.getTime();
        if (time != null) {
            stmt.bindLong(10, time);
        }
 
        String keywords = entity.getKeywords();
        if (keywords != null) {
            stmt.bindString(11, keywords);
        }
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public NewsListInfo readEntity(Cursor cursor, int offset) {
        NewsListInfo entity = new NewsListInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // type
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // count
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // description
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // fcount
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // fromname
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // title
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // img
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // fromurl
            cursor.isNull(offset + 9) ? null : cursor.getLong(offset + 9), // time
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10) // keywords
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, NewsListInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0));
        entity.setType(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setCount(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setDescription(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setFcount(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setFromname(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setTitle(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setImg(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setFromurl(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setTime(cursor.isNull(offset + 9) ? null : cursor.getLong(offset + 9));
        entity.setKeywords(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(NewsListInfo entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(NewsListInfo entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
